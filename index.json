[{"categories":null,"contents":"Adding Syna to your site You can use Syna by adding it as a submodule to your website repository and pointing the submodule to the latest release. This way whenever you want to update the theme you can just pull the updates and checkout to the latest tag.\ngit submodule init # If you haven\u0026#39;t initialized before git submodule add https://git.okkur.org/syna themes/syna cd themes/syna git checkout v0.17 # Latest release as of now is v0.17.4 You can visit Hugo\u0026rsquo;s documentation on installing themes for more information.\nUsing starter If you don\u0026rsquo;t have a site yet, you can use our starter. Using the starter you will have a sample page with several fragment examples and you can use them to start building your own website.\ngit clone --recurse-submodules https://git.okkur.org/syna-start # --recurse-submodules will clone the theme cd syna-start hugo server -D # to build your website, run hugo instead ","permalink":"https://whalley.github.io/mmex-www/docs/installation/","tags":null,"title":"Installation"},{"categories":null,"contents":"Syna \u0026amp; Fragments Fragments are the base building block of your website. Each page is made up of one or multiple fragments. These can be a navigation fragment, a content fragment and more.\nWhere to put the fragments In Hugo, the simplest way to create a page is to create a directory containing an index.md file. If you need to create a new section for your website, then instead of an index.md file, simply create _index.md. Section pages in Hugo are mostly called list and other pages are called single.\nAfter creating your page, you need to create fragments to populate that page.\nEach fragment is controlled by a content file. This file is located next to index.md of the page if the page is single or in the _index directory if the page is a section one or homepage.\nFor example:\n content/my-page/index.md: defines the page and a few attributes such as page title content/my-page/my-fragment.md: content file for a fragment specified as attribute fragment = \u0026quot;content\u0026quot;  That fragment file should contain at least the following:\n+++ fragment = \u0026quot;[The fragment you want to use]\u0026quot; weight = 10 +++ For single pages, the directory content would look something like the following:\ncontent ├── my-page | ├── index.md | ├── nav.md | ├── hero | | ├── index.md  content directory: The directory where Hugo looks for pages of the website  my-page directory: A page called my-page which is accessible by [path-to-website]/my-page  index.md: Contains page title, url and other page properties. Can also be a fragment itself. nav.md: A nav fragment. Would override any other global fragment named nav. hero directory: A directory that can contain a single fragment. Name of the fragment would be hero and would override any other fragment named hero.  index.md: Controller file for the hero fragment        For list pages, it\u0026rsquo;s just a bit different:\ncontent | ├── my-section | | ├── _index.md | | ├── _index | | | ├── index.md | | ├── my-page | | | ├── index.md  _index.md: This file is the same as my-page/index.md in the single layout but it cannot be a fragment _index directory: For list pages, fragments are located in this directory  index.md: This file should be a headless page. If not, Hugo would render the page. You can use this file as fragment.    Global fragments such as nav and footer and copyright can be located in the content/_global directory. Fragments located in this directory would appear in every page unless there\u0026rsquo;s another fragment with the same name closer to the page.\nGlobal Fragments For fragments of a website, that need to show up on every page, we have global fragments. Global fragments are located in a special content directory content/_global/. All fragments within this directory are rendered on all pages by default.\nTo prevent the page being rendered as a separate page on your website, we define the whole directory as a headless bundle within the index.md file. To overwrite a global fragment create a per page fragment with the same filename. This would overwrite the global one.\nIn order to hide a global fragment in a specific page or section, you can use the hide global variable.\nAside from the content/_global/ directory, you can create _global/ directory in any section\u0026rsquo;s directory (content/[section]/_global/). Each section can have global fragments and if there are multiple fragments with the same name, the fragment closest to the page would override the others.\nDisabling a global fragment in specific pages/sections As global fragments are displayed in all child pages, you might want to disable them in some of those pages or specific sections. You can do so by duplicating that fragment in the page you want and disable it there.\nFor example if you have /content/_global/nav.md and want to disable it in your blog, create /content/blog/_global/nav.md with following configuration:\n+++ fragment = \u0026quot;nav\u0026quot; disabled = true +++ Built-in fragments There are several pre-bundled fragments already available in Syna. You can see the full list and their documentation in the fragments section. These fragments make use of some global variables along with their own variables which are mentioned in the fragment\u0026rsquo;s page.\nCustom fragments You can add your own custom fragment by creating a new layout file within your website\u0026rsquo;s layouts/partials/fragments/ directory. If this path doesn\u0026rsquo;t exist yet, you can create it beforehand.\nFragments with subitems For image bundling or subitems in fragments such as member or items a subdirectory should be used.\n content/my-page/index.md defines the page and a few attributes such as page title content/my-page/member.md content file for a fragment specified as attribute fragment = \u0026quot;member\u0026quot; content/my-page/member/my-teammate.md individual content file per member content/my-page/member/my-teammate.png  The attributes and content of this file are passed to the specified fragment (fragment = \u0026quot;member\u0026quot;). Using the weight attribute you can specify the order.\nShort-comings As mentioned, fragments are controlled by content files. There is one exception and that is menus. Hugo does not allow menus to be defined in content files. In order to customize menu options for a fragment you need to configure them within your website\u0026rsquo;s config.toml file. As of right now there are three fragments using menus:\n nav: menu.prepend, menu.main and menu.postpend footer: menu.footer and menu.footer_social copyright: menu.copyright_footer  Whenever Hugo allows for resource menus or when we figure out a way to have menu features with frontmatter arrays this would change and menus would be configurable with resource variables like everything else. The change would be breaking. So when updating the theme please read the CHANGELOG and check for breaking changes.\nFurthermore we use two keywords, that can\u0026rsquo;t be used to create pages. Both ìndex and global have a special meaning within the Syna fragment and using them separately might lead to issues.\n","permalink":"https://whalley.github.io/mmex-www/docs/fragments/","tags":null,"title":"Fragments"},{"categories":null,"contents":"Syna has a built-in communication stream that is mostly used to send messages between fragments. Although the stream is not limited to fragments, it can be used to publish anything and anywhere in the code, a subscriber can be added that can listen to the published events.\nThe stream has three main functions, publish, subscribe and unsubscribe. Any event published using the publish function can be listened to by subscribe function, allowing easy, decoupled and isolated functionalities inside fragments and the whole page.\nEvents can be triggered either by directly calling the publish function on the window.syna.stream object or by an special url query which is explained below.\npublish function You can call publish function anywhere in your code. In the built-in fragments, it\u0026rsquo;s mostly called on buttons' click handlers.\nThe function accepts two arguments, topic and args\ntopic type: string\nEvent topic.\nargs type: string | object\nWhen using the string format, the string should look like the following format:\nkey:value,key2:value2 The string will be converted to an object and will be published as paramaters along with the topic.\nEvent urls There is an easier way to publish events and that is to open a url. This is more useful when the event is going to be published when an a tag is clicked on. The url event is a url with a query appended to it that has an event attribute in it. For example:\n/fragments/stripe/?event=pricing:change\u0026amp;product=Starting plan\u0026amp;price=$9.99/mo\u0026amp;currency=usd In this example, when the page /fragments/stripe/ is opened, the event stream will translate the query, publishing a pricing:change event with product, price and currency parameters attached to it. If there is an event attribute in the query, every other attribute will be published as it\u0026rsquo;s parameter.\nNOTE: Event urls need to be Base64 encrypted. In order for the example above to work you need to add unsafeEvents = true to your config.toml file. Base64 events need to have e attribute inside them with the entire encrypted query as it\u0026rsquo;s value. The url above will look like this in the Base64 format.\n/fragments/stripe/?e=P2V2ZW50PXByaWNpbmc6Y2hhbmdlJnByb2R1Y3Q9U3RhcnRpbmcgcGxhbiZwcmljZT0kOS45OS9tbyZjdXJyZW5jeT11c2Q= To convert your event to Base64, use an online service such as base64encode.org or you can call btoa function in your browser\u0026rsquo;s devtools console. For example: btoa('?event=...\u0026amp;key=...\u0026amp;key2=...)\nsubscribe function The subscribe function adds a listener for the specified topic. This function receives the following arguments.\ntopic type: string\nEvent topic.\nlistener The listener function. The function is invoked with event parameters.\nExample: The following published event:\n/fragments/stripe/?event=pricing:change\u0026amp;product=Starting plan\u0026amp;price=$9.99/mo\u0026amp;currency=usd // or by calling the publish function window.syna.stream.publish('pricing:change', { product: 'Starting plan', price: '$9.99/mo', currency: 'usd' }) will trigger the following subscriber:\nwindow.syna.stream.subscribe('pricing:change', function(params) { alert('You have selected ' + params.product) }) ","permalink":"https://whalley.github.io/mmex-www/docs/events/","tags":null,"title":"Events"},{"categories":null,"contents":"There are a few frontmatter variables that can be used for all fragments. The variables are as follows:\nfragment type: string\nRequired for every fragment\nSpecifies what fragment the current file controls. Checkout Fragment Implementation for more info.\nweight type: number\nRequired for every fragment\nThis variable is used for ordering fragments in a page. It can be empty but it would cause the fragment to be sorted in an unexpected manner.\nbackground Set the background of the fragment.\nBackground also affects the text color of the fragment\u0026rsquo;s content. For the background colors of white, light, secondary and primary we use Bootstrap\u0026rsquo;s text_dark class on content and for other backgrounds, we use text_light.\nList of all supported colors can be found in supported colors section of the docs.\ntitle type: string\nSet title of the fragment\nsubtitle type: string\nSet subtitle of the fragment\ntitle_align type: string\naccepted values: right, left, center\nChange alignment of fragment\u0026rsquo;s header\npadding type: string\nExperimental\nChanges the padding of fragment\u0026rsquo;s container\nasset type: asset object\nThis variable is not a global variable but a variable type that is used in a lot of fragments.\nAny fragment that uses this variable type would show either an image or an icon.\nThe type is introduced to make configuring images and icons same between different fragments.\nSome fragments automatically resize images to better fit the layout. For the best result use the documented size of each fragment\u0026rsquo;s asset object. To disable image resizing use assets stored within static/ as these are excluded from auto resizing. Please make sure to provide the correct size as documented for each fragment\u0026rsquo;s asset object.\nasset.image type: string\nLink to an image file. asset.image supports the build in image fallthrough mechanism. If asset.image is set, asset.icon will be ignored.\nasset.icon type: string\nIcon class powered by FontAwesome such as fab fab-github.\nasset.url type: string\nAction/clickable URL of the image or the icon.\nasset.text type: string\nIf asset.image is set, text will be used as alternative text (alt-text) of the image.\ndisable type: boolean\nIf set to true, Syna will not register the fragment. This is useful for drafting fragments.\nNOTE: disable doesn\u0026rsquo;t register the fragment at all. This means you can not remove a global fragment in a specific page by a duplicate disabled fragment. In order to hide a global fragment in a page, use hide.\nhide type: boolean\nIf set to true, Syna will not call the fragment and will hide it. Useful for hiding a global fragment in the page. For more information, please checkout global fragments.\n","permalink":"https://whalley.github.io/mmex-www/docs/global-variables/","tags":null,"title":"Global Variables"},{"categories":null,"contents":"Some fragments may display images, if configured in their content files. The configuration accepts a filename and will search for the actual image using a fallthrough mechanism. The lookup order is shown below:\n   Lookup within the fragment\u0026rsquo;s subdirectory such as content/[page]/[fragment]/[filename].md).    Lookup, if the above doesn\u0026rsquo;t match any files, it will try to match a file within the page directory such as content/[page].    Lookup, if none of the above match any files, it will try the global static/images/ directory.    So the fragment will look in the following order fragment \u0026gt; page \u0026gt; global. If you need to use an image in several pages you can put it in the static/images/ directory and the image would be available globally. But if an image may differ between two pages or even two fragments of same the type, it\u0026rsquo;s possible to collocate it with the content files either on a per page or per fragment level.\nSyna supports custom favicons in config.toml allowing for ICO, PNG or SVG image formats. In order to use one of the custom favicon formats, you can specify the image file name in config.toml and save the image file in the \u0026lsquo;static/\u0026rsquo; directory.\n","permalink":"https://whalley.github.io/mmex-www/docs/image-fallthrough/","tags":null,"title":"Image Fallthrough"},{"categories":null,"contents":"Supported Colors Fragments and various elements can be customized further using Bootstrap color classes. These colors are customized within config.toml to fit the Syna theme.\n   class colors     primary #00838F   secondary #868e96   success #008f54   info #00838F   warning #fdf314   danger #dc1200   light #f8f9fa   dark #343a40    In order to change the primary color, you can update the primary color within your config.toml file:\n[params] [params.colors] primary = \u0026#34;#00838F\u0026#34; Please note that colors is under params section of your configuration.\nThese colors are mainly used for backgrounds and button colors.\nBy changing the colors, all fragment colors and backgrounds will be changed to the new colors. Links, inline code and other elements will also be changed.\nThese colors can also be overwritten for more details see our style documentation.\nImportant: These colors define the color scheme that Bootstrap uses. As you update them, be careful to keep the contrast between different colors. Since it\u0026rsquo;s not possible to recognize the contrast of colors within Syna, we rely on the names of colors when setting different text colors for different backgrounds. So if you change the primary color to a darker color, text colors will still use the text-body class from Bootstrap which is a dark color and may result in unreadable text.\nPostCSS PostCSS is enabled by default and will look for its configuration file when Hugo is building your website. You can add your configuration to postcss.config.js at the root of your project. Here are some recommended configurations. Please note that you can combine these configurations and use them together.\nRemoving unused CSS We recommend using @fullhuman/postcss-purgecss along PostCSS to remove unused CSS from your website. PurgeCSS will drastically reduce the size of your website. Since we use Bootstrap to develop our built-in fragments, the final CSS bundle is mostly Bootstrap code that goes unused. To remove the unused parts, please run:\n npm install @fullhuman/postcss-purgecss or yarn add @fullhuman/postcss-purgecss Add the following code to \u0026lt;root-directory\u0026gt;/postcss.config.js:  const purgecss = require(\u0026#39;@fullhuman/postcss-purgecss\u0026#39;)({ content: [\u0026#39;./hugo_stats.json\u0026#39;], defaultExtractor: (content) =\u0026gt; { let els = JSON.parse(content).htmlElements; return els.tags.concat(els.classes, els.ids, [ \u0026#39;active\u0026#39;, \u0026#39;show\u0026#39;, \u0026#39;in\u0026#39;, ]); }, }); module.exports = { plugins: [ ...(process.env.HUGO_ENVIRONMENT === \u0026#39;production\u0026#39; ? [purgecss] : []), ], }; RTL stylesheet Syna is created for LTR languages but changing the theme to accommodate RTL languages is quite easy. In order to change the direction of the stylesheet, please run the following command:\n npm install rtlcss or yarn add rtlcss Add the following code to \u0026lt;root-directory\u0026gt;/postcss.config.js:  module.exports = { plugins: [ require(\u0026#39;rtlcss\u0026#39;)() ] } ","permalink":"https://whalley.github.io/mmex-www/docs/styling/","tags":null,"title":"Styling"},{"categories":null,"contents":"We develop our front-end code in the assets/ directory which allows us to have a development directory that would be built to be production ready and put inside the static/ and resources/ directories (which are the directories Hugo looks into for front-end files) using Webpack and Hugo\u0026rsquo;s own resource pipelines. To start the build process for development run the following commands:\nmake dep make dev # Or make build for production build Prerequisites: node and yarn need to be installed on your system.\nStyles Syna is using Bootstrap v4.1 with a customized set of colors. You can change these colors by editing them in config.toml. Change other Bootstrap variables using assets/styles/bootstrap/_variables.scss. Syna customizes some parts of the theme via custom css, which is available in the assets/styles directory.\nFonts FontAwesome Free is supported by default and is used throughout built-in fragments. You can disable it by setting fontawesome.disabled in your config.toml to true.\nIf you want to add FontAwesome Pro to the theme, the following recipe may be helpful.\n Move all the files from fontawesome-pro-[version]-web/webfonts/ (from the archive) to static/fonts1 directory. Move all the files from fontawesome-pro-[version]-web/scss/ (from the archive) to assets/styles/fontawesome1 directory. Set fontawesome.pro in your config.toml file to true.  After these steps, FontAwesome Pro will be loaded in every page of your website.\nJavaScript Syna uses code spliting to get bundles for each fragment. This allows us to have lighter pages in most cases. Within the assets/js/ directory there is an index.js file that is the main script, which is necessary on all pages. Every other script is needed by the fragment of the same name. For example hero.js is needed by the hero fragment.\nIf you want to add an extra script for a specific fragment, you need to add that script as an entry point in the webpack configuration file. Then import that script inside the fragment (using the script tag).\nTranspiled and bundled JS files are located inside assets/scripts/ directory and are generated using Webpack.\nReact support Syna has built-in support for React. We use React portal API inside the react-portal fragment. This allows us to render an empty container that is able to render components inside it.\nTo use this feature you can add a new react-portal to your page, write your component and expose it inside the window.synaPortals object.\nimport * as React from \u0026#39;react\u0026#39;; class Hello extends React.Component { render() { return ( \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; ); } } (window.synaPortals || (window.synaPortals = {})).hello = { component: Hello, container: \u0026#39;#hello [data-portal]\u0026#39;, }; The #hello [data-portal] is where your component renders. [data-portal] is a div tag inside your react-portal fragment and hello in this example, is the fragment\u0026rsquo;s filename.\nKeep in mind that JSX is not supported by browsers. Please checkout our example Webpack config and the required dependencies and commands.\n  Note that the mentioned directory in your website\u0026rsquo;s root directory. If the directory doesn\u0026rsquo;t exist, create it in that path. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://whalley.github.io/mmex-www/docs/development/","tags":null,"title":"Development"},{"categories":null,"contents":"Fragments themselves are Hugo partials that are located in layouts/partials/fragments/. Partials built into Syna are stored within the theme\u0026rsquo;s layout directory. Hugo enables local or per website overwrites of layouts and partials. For more details checkout Hugo\u0026rsquo;s template lookup order.\nThe default layout single.html is used to render each page. For list pages we use list.html layout. These layouts don\u0026rsquo;t need to be explicitly mentioned\nThe rendering code flow of Syna would do the following:\n single.html or list.html layout is called  The layout decides where the page directory is located (for list pages, it would be a _index directory next to index.md) helpers/fragments.html would find all the global fragments and all the local fragments  The process of finding all the fragments involved destructing the path to the page Locating all the _global/ directories in the parent directories and the current directory if the current page is a list page Sorting the said directories from the closest to the page to the furthest, making the local fragments and nearest _global directories more important   The helper would then remove duplicate fragments (fragments with the same name or the same directory name) All the page fragments are registered in a Scratch and can later be used for various reasons   head.html partial is rendered from baseof.html layout helpers/fragments-renderer.html is called  Fragments are ordered based on their weight attribute Fragments that are not disabled are rendered (404 fragment would not be rendered in any other page than 404)   A container for modal and React is added to the page in case there is any need for them js.html partial is rendered from baseof.html layout  Creating new fragments In order to create a custom fragment for your website create a new layout file named after your fragment and place it under [project_root]/layouts/partials/fragments/. Fragments are partials and follow the same rules. If you are not familiar with partials more details are available in the Hugo documentation.\n","permalink":"https://whalley.github.io/mmex-www/docs/fragments-implementation/","tags":null,"title":"Fragments Implementation"},{"categories":null,"contents":"Syna supports creating Multilingual websites since v0.16.1. The implementation currently supports specifying languages on a per file basis such as page[.language code].md future.\n In order to make your website multilingual, you need to change your configuration so Hugo will generate new pages for translated content in your project.\nThe way Multilingual mode works is that Hugo generates a new website for each language and add each page to the website of the same language. For example if your website has two languages, English and German, and each page is translated for both languages, Hugo will generate two websites with same pages but in two languages. Hugo will not however generate English pages for German website if those pages are not translated to German.\nFor more information on Hugo\u0026rsquo;s Multilingual mode, please refer to their documentation.\nMultilingual website using Syna Please read the documentation provided by [Hugo](https: //gohugo.io/content-management/multilingual/). Please keep in mind that in order to make the configuration work with Syna, you have to:\n Add DefaultContentLanguage value to params section of your website\u0026rsquo;s configuration file Use [translation by filename](https: //gohugo.io/content-management/multilingual/#translation-by-filename) only  Due to how we implement pages, we need these limitations to support multilingual mode.\nExample For example, to configure two languages, you need to update your main your configuration. Here\u0026rsquo;s an example from the official documentation:\nDefaultContentLanguage = \u0026quot;en\u0026quot; [languages] [languages.en] title = \u0026quot;My blog\u0026quot; weight = 1 [languages.fr] title = \u0026quot;Mon blogue\u0026quot; weight = 2 [params] DefaultContentLanguage = \u0026quot;en\u0026quot; ... Please note that these parameters are added outside of params variable, inside your configuration file (config.toml, config.yaml, config.json). This will let Hugo know that there are two languages for this project and the default language is English (DefaultContentLanguage = \u0026quot;en\u0026quot;). Since Hugo doesn\u0026rsquo;t expose the default language to the themes, you need to add the parameter to params as well:\n[params] DefaultContentLanguage = \u0026quot;en\u0026quot; With this, whenever you build your website or start the development server, for each translated page you get example.com/[page] and example.com/fr/[page].\nSyna can generate pages for both approaches of content management that Hugo supports but currently we only support the \u0026ldquo;Translation by filename\u0026rdquo; approach. We hope to add support for \u0026ldquo;Translation by content directory\u0026rdquo; in the future.\n Syna allows for fragment overrides in translated pages. This means that when you translate a page, the translated version will contain all the fragments from the default language. This allows for fewer duplicated files in your project. This works the same way as \u0026ldquo;Translation by filename\u0026rdquo;. For example, let\u0026rsquo;s assume we have an contact page in our project. The content directory might look somthing like this:\ncontact/index.md contact/contact.md contact/portfolio.md contact/pricing.md If you want to create a French translation for the contact page, and portfolio fragment inside that page needs to be translated as well, you need to create a copy from index.md and portfolio.md and name them index.fr.md and portfolio.fr.md, respectively.\ncontact/index.md contact/index.fr.md contact/contact.md contact/portfolio.md contact/portfolio.fr.md contact/pricing.md A French version of the page will be generated, containing all your fragments but the portfolio fragment will be the translated version. The page will have not changed for the default language.\nMultilingual mode is currently release as alpha. It is subject to changes and may not be stable. Please follow the changelog and updates to this page for more information and news about any changes. Please create issues and pull requests and let us know what you think.\n ","permalink":"https://whalley.github.io/mmex-www/docs/multilingual/","tags":null,"title":"Multilingual Mode"},{"categories":null,"contents":"In order to deploy your website using Syna follow the Hugo documentation which describes the process of deploying on various hosts or host agnostic approaches.\nEnvironment Variables DEMO_MODE type: boolean\ndefault: false\nIf set to true, all Syna related build time error messages will be muted.\nConfigurations .Site.Params.debug type: boolean\ndefault: false\nIf set to true, Syna related error messages will appear on the page.\n","permalink":"https://whalley.github.io/mmex-www/docs/deployment/","tags":null,"title":"Deployment"},{"categories":null,"contents":"Call to action and description for the 404 (page not found) page\nSimple fragment with an image (usually logo of the website), a description and a call to action button. This fragment should be located inside the global fragments directory and is only rendered in the 404 page.\nSince 404 fragment can not be rendered in normal pages, the following is a screenshot.\n","permalink":"https://whalley.github.io/mmex-www/fragments/404/","tags":null,"title":"404"},{"categories":null,"contents":"Flexible call to action buttons making external or on site links actionable.\n","permalink":"https://whalley.github.io/mmex-www/fragments/buttons/","tags":null,"title":"Buttons"},{"categories":null,"contents":"Add additional meta tags, link tags and script tags to page.\nThis fragment, unlike most other fragments, doesn\u0026rsquo;t render anything (so it wouldn\u0026rsquo;t need a weight variable).\nIf a config fragment is registered on a page, it\u0026rsquo;s configuration values are considered and added before the \u0026lt;/body\u0026gt; tag (default) or at the end of \u0026lt;head\u0026gt; tag.\nAcceptable config types are meta, icon, css and js. Each config can contain either html or resource (except for meta type which only accepts html and is added as a \u0026lt;meta\u0026gt; tag to the \u0026lt;head\u0026gt; of the document). resource can accept either a file path (relative to static/ directory) or a URL. This will then be added to a \u0026lt;link\u0026gt; or \u0026lt;script\u0026gt; tag based on the type value.\nThis example adds Bootstrap color scheme (link) to the page.\nYou can use this fragment to add custom scripts for different pages, or different sections or all of the pages together (through the _global directories).\n","permalink":"https://whalley.github.io/mmex-www/fragments/config/","tags":null,"title":"Config"},{"categories":null,"contents":"Contact form for help, contact and feedback\nContact fragment renders a form with a maximum of 4 fields:\n Name Email Phone Message  This fragment supports validations and thus can have customized error messages. Recaptcha and Netlify (with Netlify auto Recaptcha) support is also available. Other options are using a custom server or other form submission handlers such as Formspree.\n","permalink":"https://whalley.github.io/mmex-www/fragments/contact/","tags":null,"title":"Contact"},{"categories":null,"contents":"Write pages and articles using Markdown and Hugo shortcodes\nContent fragment can show rich text content converted from Github styled Markdown with an optional sidebar.\n Without sidebar With sidebar With sidebar aligned right ","permalink":"https://whalley.github.io/mmex-www/fragments/content/","tags":null,"title":"Content"},{"categories":null,"contents":"Copyright section of the page\nCopyright fragment is used to show the copyright information, attribution and extra links.\n","permalink":"https://whalley.github.io/mmex-www/fragments/copyright/","tags":null,"title":"Copyright"},{"categories":null,"contents":"JSONSchema compatible editor using React\n","permalink":"https://whalley.github.io/mmex-www/fragments/editor/","tags":null,"title":"Editor"},{"categories":null,"contents":"Embed anything from anywhere such as videos, slides, forms and more\nEmbed fragment can either embed a media source url such as youtube videos or set custom iframe html code.\n Embed with url Embed with source ","permalink":"https://whalley.github.io/mmex-www/fragments/embed/","tags":null,"title":"Embed"},{"categories":null,"contents":"Frequently asked questions of your website\n","permalink":"https://whalley.github.io/mmex-www/fragments/faq/","tags":null,"title":"FAQ"},{"categories":null,"contents":"Footer section with description, social links and footer navigation.\n","permalink":"https://whalley.github.io/mmex-www/fragments/footer/","tags":null,"title":"Footer"},{"categories":null,"contents":"Display any chart, responsive and highly configurable, powered by Chart.js\n","permalink":"https://whalley.github.io/mmex-www/fragments/graph/","tags":null,"title":"Graph"},{"categories":null,"contents":"Add a customizable header for different sections\nThis simple fragment displays a simple header and can be used to display titles for different sections of the page or just simply create a link for several sections.\n","permalink":"https://whalley.github.io/mmex-www/fragments/header/","tags":null,"title":"Header"},{"categories":null,"contents":"Showcase your logo, header and most important call to actions\nHero fragment can be used in your website\u0026rsquo;s landing page or as first call to action on various sub pages. It can display a logo/image, title, subtitle and various call to action buttons. Additionally a background image can be configured or particleJS can be enabled.\nHero fragment has support for image resource fallthrough.\n","permalink":"https://whalley.github.io/mmex-www/fragments/hero/","tags":null,"title":"Hero"},{"categories":null,"contents":"Showcase your projects, features and more\nItem fragment can be used to display a lot of different formats of data. It supports a button, image, table and icon.\nItem fragment has support for image resource fallthrough.\n Item fragment - Image aligned right Item fragment - Image aligned only Item fragment - Image with table aligned left Item fragment - Image with button aligned left Item fragment - Image aligned center Item fragment - Button aligned right Item fragment - Button aligned left Item fragment - Button aligned center Item fragment - Icon aligned right Item fragment - Icon aligned left Item fragment - Icon aligned center ","permalink":"https://whalley.github.io/mmex-www/fragments/item/","tags":null,"title":"Item"},{"categories":null,"contents":"List your project\u0026rsquo;s features and services\nItems fragment can be used to display a list of features, testimonials and anything that needs to be listed in a row. It has support for icons to be displayed.\nThis fragment need to always be placed in a subdirectory that contains the fragment content file and the specific content files of each member.\n Items fragment - Icons Items fragment - Icons with no content Items fragment - Icons only Items fragment - Images Items fragment - Images with no content Items fragment - Images only ","permalink":"https://whalley.github.io/mmex-www/fragments/items/","tags":null,"title":"Items"},{"categories":null,"contents":"List of all pages from a section/directory.\nList fragment can list all the pages from a section, including subsections and pages inside those subsections. This listing can be shown in normal list layout or tiled layout.\nList fragment can be used in normal pages as well as section pages. But if used in section pages, it has the ability to use pagination.\n List fragment - Normal layout List fragment - Tiled layout ","permalink":"https://whalley.github.io/mmex-www/fragments/list/","tags":null,"title":"List"},{"categories":null,"contents":"Show off your team or showcase yourself on your personal website\nMember fragment can be used to display your team members, their contact information, achievements, a bio and more.\nThis fragment need to always be placed in a subdirectory that contains the fragment content file and the specific content files of each member.\nSince member fragment can display an image per member, it has support for image resource fallthrough.\nThere are two modes of showing members supported by members fragment.\n Single member Multiple members ","permalink":"https://whalley.github.io/mmex-www/fragments/member/","tags":null,"title":"Member"},{"categories":null,"contents":"The navbar of your website\nNavbar fragment can show a logo/image, a menu with support for external links and a special icon link useful for linking to Github or Gitlab.\nNote: Search doesn\u0026rsquo;t look very good in this page because there are two navbars in the page which is not expected. Please use search in other pages.\n","permalink":"https://whalley.github.io/mmex-www/fragments/nav/","tags":null,"title":"Nav"},{"categories":null,"contents":"List of images and descriptions of what you work on\nPortfolio fragment can display up to 3 images in a row, which get realigned responsively. Title and subtitle are shown as overlays. An additional description can be provided and shown as a modal upon clicking the portfolio. In the case a item_url is provided the portfolio will redirect to the specified url instead of opening the modal.\n","permalink":"https://whalley.github.io/mmex-www/fragments/portfolio/","tags":null,"title":"Portfolio"},{"categories":null,"contents":"List of pricing plans for the project. Can be linked to a payment website.\n","permalink":"https://whalley.github.io/mmex-www/fragments/pricing/","tags":null,"title":"Pricing"},{"categories":null,"contents":"Container for a React Component\nReact portal fragment can render any React component registered in window.synaPortals. Using this component will enable React for the page and create a div tag as the container for the component.\n","permalink":"https://whalley.github.io/mmex-www/fragments/react-portal/","tags":null,"title":"React Portal"},{"categories":null,"contents":"Display user repositories from Github.\nFor now, we only support Github. You can review the documentation for their API.\nWe will add support for more sevices in the future.\n","permalink":"https://whalley.github.io/mmex-www/fragments/repositories_github/","tags":null,"title":"Repositories - Github"},{"categories":null,"contents":"Search fragment using fuzzy search.\n","permalink":"https://whalley.github.io/mmex-www/fragments/search/","tags":null,"title":"Search"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/search/","tags":null,"title":"Search"},{"categories":null,"contents":"Simple to use payment fragment using Stripe.\nYou need to provide an API endpoint for handling Stripe payment using post_url variable since handling payments requires a secret token from Stripe.\n","permalink":"https://whalley.github.io/mmex-www/fragments/stripe/","tags":null,"title":"Stripe"},{"categories":null,"contents":"Fully responsive and customizable table\nTable fragment is to display a table in the page containing as many rows and columns as you want and make them responsive. Table cells can contain text, icons and buttons which can also be linked.\n","permalink":"https://whalley.github.io/mmex-www/fragments/table/","tags":null,"title":"Table"},{"categories":null,"contents":"Add table of contents of any content fragment to the page.\nToC fragment can be used to render Table of Contents of any content fragment from any page. The default behavior is to get the name of the content fragment on the same page:\ncontent = \u0026quot;content.md\u0026quot; But if you need to get the Table of Contents of other pages, just address them relative to the content directory:\ncontent = \u0026quot;fragments/hero/index.md\u0026quot; ","permalink":"https://whalley.github.io/mmex-www/fragments/toc/","tags":null,"title":"ToC"},{"categories":null,"contents":"Money Manager Ex is a free, open-source, cross-platform, easy-to-use personal finance software. It primarily helps organize one\u0026rsquo;s finances and keeps track of where, when and how the money goes. It is also a great tool to get a bird\u0026rsquo;s eye view of your financial worth.\nMoney Manager includes all the basic features that 90% of users would want to see in a personal finance application. The design goals are to concentrate on simplicity and user-friendliness - something one can use every day.\n ","permalink":"https://whalley.github.io/mmex-www/about/","tags":null,"title":"About Money Manager Ex"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/development/","tags":null,"title":"Development"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/download/","tags":null,"title":"Download"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/features/","tags":null,"title":"Features"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/news/","tags":null,"title":"News"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/support/","tags":null,"title":"Support"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/","tags":null,"title":"Money Manager Ex"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/docs/","tags":null,"title":"Documentation"},{"categories":null,"contents":null,"permalink":"https://whalley.github.io/mmex-www/fragments/","tags":null,"title":"Fragments showcase"}]